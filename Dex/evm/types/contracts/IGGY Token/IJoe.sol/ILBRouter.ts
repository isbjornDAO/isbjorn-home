/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ILBRouter {
  export type LiquidityParametersStruct = {
    tokenX: AddressLike;
    tokenY: AddressLike;
    binStep: BigNumberish;
    amountX: BigNumberish;
    amountY: BigNumberish;
    amountXMin: BigNumberish;
    amountYMin: BigNumberish;
    activeIdDesired: BigNumberish;
    idSlippage: BigNumberish;
    deltaIds: BigNumberish[];
    distributionX: BigNumberish[];
    distributionY: BigNumberish[];
    to: AddressLike;
    refundTo: AddressLike;
    deadline: BigNumberish;
  };

  export type LiquidityParametersStructOutput = [
    tokenX: string,
    tokenY: string,
    binStep: bigint,
    amountX: bigint,
    amountY: bigint,
    amountXMin: bigint,
    amountYMin: bigint,
    activeIdDesired: bigint,
    idSlippage: bigint,
    deltaIds: bigint[],
    distributionX: bigint[],
    distributionY: bigint[],
    to: string,
    refundTo: string,
    deadline: bigint
  ] & {
    tokenX: string;
    tokenY: string;
    binStep: bigint;
    amountX: bigint;
    amountY: bigint;
    amountXMin: bigint;
    amountYMin: bigint;
    activeIdDesired: bigint;
    idSlippage: bigint;
    deltaIds: bigint[];
    distributionX: bigint[];
    distributionY: bigint[];
    to: string;
    refundTo: string;
    deadline: bigint;
  };

  export type PathStruct = {
    pairBinSteps: BigNumberish[];
    versions: BigNumberish[];
    tokenPath: AddressLike[];
  };

  export type PathStructOutput = [
    pairBinSteps: bigint[],
    versions: bigint[],
    tokenPath: string[]
  ] & { pairBinSteps: bigint[]; versions: bigint[]; tokenPath: string[] };
}

export interface ILBRouterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addLiquidity"
      | "addLiquidityNATIVE"
      | "createLBPair"
      | "getFactory"
      | "getIdFromPrice"
      | "getLegacyFactory"
      | "getLegacyRouter"
      | "getPriceFromId"
      | "getSwapIn"
      | "getSwapOut"
      | "getV1Factory"
      | "getWNATIVE"
      | "removeLiquidity"
      | "removeLiquidityNATIVE"
      | "swapExactNATIVEForTokens"
      | "swapExactNATIVEForTokensSupportingFeeOnTransferTokens"
      | "swapExactTokensForNATIVE"
      | "swapExactTokensForNATIVESupportingFeeOnTransferTokens"
      | "swapExactTokensForTokens"
      | "swapExactTokensForTokensSupportingFeeOnTransferTokens"
      | "swapNATIVEForExactTokens"
      | "swapTokensForExactNATIVE"
      | "swapTokensForExactTokens"
      | "sweep"
      | "sweepLBToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [ILBRouter.LiquidityParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityNATIVE",
    values: [ILBRouter.LiquidityParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createLBPair",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIdFromPrice",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLegacyFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLegacyRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceFromId",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapIn",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapOut",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getV1Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWNATIVE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityNATIVE",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactNATIVEForTokens",
    values: [BigNumberish, ILBRouter.PathStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
    values: [BigNumberish, ILBRouter.PathStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForNATIVE",
    values: [
      BigNumberish,
      BigNumberish,
      ILBRouter.PathStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      ILBRouter.PathStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      BigNumberish,
      BigNumberish,
      ILBRouter.PathStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [
      BigNumberish,
      BigNumberish,
      ILBRouter.PathStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapNATIVEForExactTokens",
    values: [BigNumberish, ILBRouter.PathStruct, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactNATIVE",
    values: [
      BigNumberish,
      BigNumberish,
      ILBRouter.PathStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      BigNumberish,
      BigNumberish,
      ILBRouter.PathStruct,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sweepLBToken",
    values: [AddressLike, AddressLike, BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityNATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLBPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIdFromPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLegacyFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLegacyRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceFromId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSwapIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getV1Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getWNATIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityNATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactNATIVEForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForNATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForNATIVESupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapNATIVEForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactNATIVE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sweepLBToken",
    data: BytesLike
  ): Result;
}

export interface ILBRouter extends BaseContract {
  connect(runner?: ContractRunner | null): ILBRouter;
  waitForDeployment(): Promise<this>;

  interface: ILBRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addLiquidity: TypedContractMethod<
    [liquidityParameters: ILBRouter.LiquidityParametersStruct],
    [
      [bigint, bigint, bigint, bigint, bigint[], bigint[]] & {
        amountXAdded: bigint;
        amountYAdded: bigint;
        amountXLeft: bigint;
        amountYLeft: bigint;
        depositIds: bigint[];
        liquidityMinted: bigint[];
      }
    ],
    "nonpayable"
  >;

  addLiquidityNATIVE: TypedContractMethod<
    [liquidityParameters: ILBRouter.LiquidityParametersStruct],
    [
      [bigint, bigint, bigint, bigint, bigint[], bigint[]] & {
        amountXAdded: bigint;
        amountYAdded: bigint;
        amountXLeft: bigint;
        amountYLeft: bigint;
        depositIds: bigint[];
        liquidityMinted: bigint[];
      }
    ],
    "payable"
  >;

  createLBPair: TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      activeId: BigNumberish,
      binStep: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getFactory: TypedContractMethod<[], [string], "view">;

  getIdFromPrice: TypedContractMethod<
    [LBPair: AddressLike, price: BigNumberish],
    [bigint],
    "view"
  >;

  getLegacyFactory: TypedContractMethod<[], [string], "view">;

  getLegacyRouter: TypedContractMethod<[], [string], "view">;

  getPriceFromId: TypedContractMethod<
    [LBPair: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  getSwapIn: TypedContractMethod<
    [LBPair: AddressLike, amountOut: BigNumberish, swapForY: boolean],
    [
      [bigint, bigint, bigint] & {
        amountIn: bigint;
        amountOutLeft: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;

  getSwapOut: TypedContractMethod<
    [LBPair: AddressLike, amountIn: BigNumberish, swapForY: boolean],
    [
      [bigint, bigint, bigint] & {
        amountInLeft: bigint;
        amountOut: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;

  getV1Factory: TypedContractMethod<[], [string], "view">;

  getWNATIVE: TypedContractMethod<[], [string], "view">;

  removeLiquidity: TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      binStep: BigNumberish,
      amountXMin: BigNumberish,
      amountYMin: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "nonpayable"
  >;

  removeLiquidityNATIVE: TypedContractMethod<
    [
      token: AddressLike,
      binStep: BigNumberish,
      amountTokenMin: BigNumberish,
      amountNATIVEMin: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountToken: bigint; amountNATIVE: bigint }],
    "nonpayable"
  >;

  swapExactNATIVEForTokens: TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  swapExactNATIVEForTokensSupportingFeeOnTransferTokens: TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  swapExactTokensForNATIVE: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMinNATIVE: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapExactTokensForNATIVESupportingFeeOnTransferTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMinNATIVE: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapExactTokensForTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapExactTokensForTokensSupportingFeeOnTransferTokens: TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  swapNATIVEForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;

  swapTokensForExactNATIVE: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  swapTokensForExactTokens: TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;

  sweep: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  sweepLBToken: TypedContractMethod<
    [
      _lbToken: AddressLike,
      _to: AddressLike,
      _ids: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [liquidityParameters: ILBRouter.LiquidityParametersStruct],
    [
      [bigint, bigint, bigint, bigint, bigint[], bigint[]] & {
        amountXAdded: bigint;
        amountYAdded: bigint;
        amountXLeft: bigint;
        amountYLeft: bigint;
        depositIds: bigint[];
        liquidityMinted: bigint[];
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addLiquidityNATIVE"
  ): TypedContractMethod<
    [liquidityParameters: ILBRouter.LiquidityParametersStruct],
    [
      [bigint, bigint, bigint, bigint, bigint[], bigint[]] & {
        amountXAdded: bigint;
        amountYAdded: bigint;
        amountXLeft: bigint;
        amountYLeft: bigint;
        depositIds: bigint[];
        liquidityMinted: bigint[];
      }
    ],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createLBPair"
  ): TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      activeId: BigNumberish,
      binStep: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIdFromPrice"
  ): TypedContractMethod<
    [LBPair: AddressLike, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLegacyFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLegacyRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPriceFromId"
  ): TypedContractMethod<
    [LBPair: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapIn"
  ): TypedContractMethod<
    [LBPair: AddressLike, amountOut: BigNumberish, swapForY: boolean],
    [
      [bigint, bigint, bigint] & {
        amountIn: bigint;
        amountOutLeft: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSwapOut"
  ): TypedContractMethod<
    [LBPair: AddressLike, amountIn: BigNumberish, swapForY: boolean],
    [
      [bigint, bigint, bigint] & {
        amountInLeft: bigint;
        amountOut: bigint;
        fee: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getV1Factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWNATIVE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      binStep: BigNumberish,
      amountXMin: BigNumberish,
      amountYMin: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountX: bigint; amountY: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeLiquidityNATIVE"
  ): TypedContractMethod<
    [
      token: AddressLike,
      binStep: BigNumberish,
      amountTokenMin: BigNumberish,
      amountNATIVEMin: BigNumberish,
      ids: BigNumberish[],
      amounts: BigNumberish[],
      to: AddressLike,
      deadline: BigNumberish
    ],
    [[bigint, bigint] & { amountToken: bigint; amountNATIVE: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactNATIVEForTokens"
  ): TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactNATIVEForTokensSupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForNATIVE"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMinNATIVE: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForNATIVESupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMinNATIVE: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapExactTokensForTokensSupportingFeeOnTransferTokens"
  ): TypedContractMethod<
    [
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapNATIVEForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactNATIVE"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapTokensForExactTokens"
  ): TypedContractMethod<
    [
      amountOut: BigNumberish,
      amountInMax: BigNumberish,
      path: ILBRouter.PathStruct,
      to: AddressLike,
      deadline: BigNumberish
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sweep"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sweepLBToken"
  ): TypedContractMethod<
    [
      _lbToken: AddressLike,
      _to: AddressLike,
      _ids: BigNumberish[],
      _amounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
