/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ILBFactory {
  export type LBPairInformationStruct = {
    binStep: BigNumberish;
    LBPair: AddressLike;
    createdByOwner: boolean;
    ignoredForRouting: boolean;
  };

  export type LBPairInformationStructOutput = [
    binStep: bigint,
    LBPair: string,
    createdByOwner: boolean,
    ignoredForRouting: boolean
  ] & {
    binStep: bigint;
    LBPair: string;
    createdByOwner: boolean;
    ignoredForRouting: boolean;
  };
}

export interface ILBFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addQuoteAsset"
      | "becomeOwner"
      | "createLBPair"
      | "forceDecay"
      | "getAllBinSteps"
      | "getAllLBPairs"
      | "getFeeRecipient"
      | "getFlashLoanFee"
      | "getLBPairAtIndex"
      | "getLBPairImplementation"
      | "getLBPairInformation"
      | "getMaxFlashLoanFee"
      | "getMinBinStep"
      | "getNumberOfLBPairs"
      | "getNumberOfQuoteAssets"
      | "getOpenBinSteps"
      | "getPreset"
      | "getQuoteAssetAtIndex"
      | "isQuoteAsset"
      | "owner"
      | "pendingOwner"
      | "removePreset"
      | "removeQuoteAsset"
      | "renounceOwnership"
      | "revokePendingOwner"
      | "setFeeRecipient"
      | "setFeesParametersOnPair"
      | "setFlashLoanFee"
      | "setLBPairIgnored"
      | "setLBPairImplementation"
      | "setPendingOwner"
      | "setPreset"
      | "setPresetOpenState"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeRecipientSet"
      | "FlashLoanFeeSet"
      | "LBPairCreated"
      | "LBPairIgnoredStateChanged"
      | "LBPairImplementationSet"
      | "OwnershipTransferred"
      | "PendingOwnerSet"
      | "PresetOpenStateChanged"
      | "PresetRemoved"
      | "PresetSet"
      | "QuoteAssetAdded"
      | "QuoteAssetRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addQuoteAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createLBPair",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceDecay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllBinSteps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllLBPairs",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFlashLoanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLBPairAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLBPairImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLBPairInformation",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxFlashLoanFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinBinStep",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfLBPairs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfQuoteAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOpenBinSteps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPreset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAssetAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuoteAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePreset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeQuoteAsset",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokePendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeesParametersOnPair",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFlashLoanFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLBPairIgnored",
    values: [AddressLike, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLBPairImplementation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPendingOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreset",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPresetOpenState",
    values: [BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addQuoteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "becomeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLBPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forceDecay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllBinSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllLBPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFlashLoanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLBPairAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLBPairImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLBPairInformation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxFlashLoanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinBinStep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfLBPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfQuoteAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOpenBinSteps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPreset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAssetAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuoteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePreset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeQuoteAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokePendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeesParametersOnPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFlashLoanFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLBPairIgnored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLBPairImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPreset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPresetOpenState",
    data: BytesLike
  ): Result;
}

export namespace FeeRecipientSetEvent {
  export type InputTuple = [
    oldRecipient: AddressLike,
    newRecipient: AddressLike
  ];
  export type OutputTuple = [oldRecipient: string, newRecipient: string];
  export interface OutputObject {
    oldRecipient: string;
    newRecipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashLoanFeeSetEvent {
  export type InputTuple = [
    oldFlashLoanFee: BigNumberish,
    newFlashLoanFee: BigNumberish
  ];
  export type OutputTuple = [oldFlashLoanFee: bigint, newFlashLoanFee: bigint];
  export interface OutputObject {
    oldFlashLoanFee: bigint;
    newFlashLoanFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LBPairCreatedEvent {
  export type InputTuple = [
    tokenX: AddressLike,
    tokenY: AddressLike,
    binStep: BigNumberish,
    LBPair: AddressLike,
    pid: BigNumberish
  ];
  export type OutputTuple = [
    tokenX: string,
    tokenY: string,
    binStep: bigint,
    LBPair: string,
    pid: bigint
  ];
  export interface OutputObject {
    tokenX: string;
    tokenY: string;
    binStep: bigint;
    LBPair: string;
    pid: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LBPairIgnoredStateChangedEvent {
  export type InputTuple = [LBPair: AddressLike, ignored: boolean];
  export type OutputTuple = [LBPair: string, ignored: boolean];
  export interface OutputObject {
    LBPair: string;
    ignored: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LBPairImplementationSetEvent {
  export type InputTuple = [
    oldLBPairImplementation: AddressLike,
    LBPairImplementation: AddressLike
  ];
  export type OutputTuple = [
    oldLBPairImplementation: string,
    LBPairImplementation: string
  ];
  export interface OutputObject {
    oldLBPairImplementation: string;
    LBPairImplementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PendingOwnerSetEvent {
  export type InputTuple = [pendingOwner: AddressLike];
  export type OutputTuple = [pendingOwner: string];
  export interface OutputObject {
    pendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PresetOpenStateChangedEvent {
  export type InputTuple = [binStep: BigNumberish, isOpen: boolean];
  export type OutputTuple = [binStep: bigint, isOpen: boolean];
  export interface OutputObject {
    binStep: bigint;
    isOpen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PresetRemovedEvent {
  export type InputTuple = [binStep: BigNumberish];
  export type OutputTuple = [binStep: bigint];
  export interface OutputObject {
    binStep: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PresetSetEvent {
  export type InputTuple = [
    binStep: BigNumberish,
    baseFactor: BigNumberish,
    filterPeriod: BigNumberish,
    decayPeriod: BigNumberish,
    reductionFactor: BigNumberish,
    variableFeeControl: BigNumberish,
    protocolShare: BigNumberish,
    maxVolatilityAccumulator: BigNumberish
  ];
  export type OutputTuple = [
    binStep: bigint,
    baseFactor: bigint,
    filterPeriod: bigint,
    decayPeriod: bigint,
    reductionFactor: bigint,
    variableFeeControl: bigint,
    protocolShare: bigint,
    maxVolatilityAccumulator: bigint
  ];
  export interface OutputObject {
    binStep: bigint;
    baseFactor: bigint;
    filterPeriod: bigint;
    decayPeriod: bigint;
    reductionFactor: bigint;
    variableFeeControl: bigint;
    protocolShare: bigint;
    maxVolatilityAccumulator: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoteAssetAddedEvent {
  export type InputTuple = [quoteAsset: AddressLike];
  export type OutputTuple = [quoteAsset: string];
  export interface OutputObject {
    quoteAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuoteAssetRemovedEvent {
  export type InputTuple = [quoteAsset: AddressLike];
  export type OutputTuple = [quoteAsset: string];
  export interface OutputObject {
    quoteAsset: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILBFactory extends BaseContract {
  connect(runner?: ContractRunner | null): ILBFactory;
  waitForDeployment(): Promise<this>;

  interface: ILBFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addQuoteAsset: TypedContractMethod<
    [quoteAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  becomeOwner: TypedContractMethod<[], [void], "nonpayable">;

  createLBPair: TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      activeId: BigNumberish,
      binStep: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  forceDecay: TypedContractMethod<[lbPair: AddressLike], [void], "nonpayable">;

  getAllBinSteps: TypedContractMethod<[], [bigint[]], "view">;

  getAllLBPairs: TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike],
    [ILBFactory.LBPairInformationStructOutput[]],
    "view"
  >;

  getFeeRecipient: TypedContractMethod<[], [string], "view">;

  getFlashLoanFee: TypedContractMethod<[], [bigint], "view">;

  getLBPairAtIndex: TypedContractMethod<
    [id: BigNumberish],
    [string],
    "nonpayable"
  >;

  getLBPairImplementation: TypedContractMethod<[], [string], "view">;

  getLBPairInformation: TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike, binStep: BigNumberish],
    [ILBFactory.LBPairInformationStructOutput],
    "view"
  >;

  getMaxFlashLoanFee: TypedContractMethod<[], [bigint], "view">;

  getMinBinStep: TypedContractMethod<[], [bigint], "view">;

  getNumberOfLBPairs: TypedContractMethod<[], [bigint], "view">;

  getNumberOfQuoteAssets: TypedContractMethod<[], [bigint], "view">;

  getOpenBinSteps: TypedContractMethod<[], [bigint[]], "view">;

  getPreset: TypedContractMethod<
    [binStep: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        baseFactor: bigint;
        filterPeriod: bigint;
        decayPeriod: bigint;
        reductionFactor: bigint;
        variableFeeControl: bigint;
        protocolShare: bigint;
        maxAccumulator: bigint;
        isOpen: boolean;
      }
    ],
    "view"
  >;

  getQuoteAssetAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  isQuoteAsset: TypedContractMethod<[token: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  removePreset: TypedContractMethod<
    [binStep: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeQuoteAsset: TypedContractMethod<
    [quoteAsset: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokePendingOwner: TypedContractMethod<[], [void], "nonpayable">;

  setFeeRecipient: TypedContractMethod<
    [feeRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  setFeesParametersOnPair: TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      binStep: BigNumberish,
      baseFactor: BigNumberish,
      filterPeriod: BigNumberish,
      decayPeriod: BigNumberish,
      reductionFactor: BigNumberish,
      variableFeeControl: BigNumberish,
      protocolShare: BigNumberish,
      maxVolatilityAccumulator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setFlashLoanFee: TypedContractMethod<
    [flashLoanFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLBPairIgnored: TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      binStep: BigNumberish,
      ignored: boolean
    ],
    [void],
    "nonpayable"
  >;

  setLBPairImplementation: TypedContractMethod<
    [lbPairImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  setPendingOwner: TypedContractMethod<
    [pendingOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  setPreset: TypedContractMethod<
    [
      binStep: BigNumberish,
      baseFactor: BigNumberish,
      filterPeriod: BigNumberish,
      decayPeriod: BigNumberish,
      reductionFactor: BigNumberish,
      variableFeeControl: BigNumberish,
      protocolShare: BigNumberish,
      maxVolatilityAccumulator: BigNumberish,
      isOpen: boolean
    ],
    [void],
    "nonpayable"
  >;

  setPresetOpenState: TypedContractMethod<
    [binStep: BigNumberish, isOpen: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addQuoteAsset"
  ): TypedContractMethod<[quoteAsset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "becomeOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createLBPair"
  ): TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      activeId: BigNumberish,
      binStep: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceDecay"
  ): TypedContractMethod<[lbPair: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllBinSteps"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAllLBPairs"
  ): TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike],
    [ILBFactory.LBPairInformationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeeRecipient"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFlashLoanFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLBPairAtIndex"
  ): TypedContractMethod<[id: BigNumberish], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getLBPairImplementation"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLBPairInformation"
  ): TypedContractMethod<
    [tokenX: AddressLike, tokenY: AddressLike, binStep: BigNumberish],
    [ILBFactory.LBPairInformationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaxFlashLoanFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinBinStep"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfLBPairs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfQuoteAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOpenBinSteps"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPreset"
  ): TypedContractMethod<
    [binStep: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        baseFactor: bigint;
        filterPeriod: bigint;
        decayPeriod: bigint;
        reductionFactor: bigint;
        variableFeeControl: bigint;
        protocolShare: bigint;
        maxAccumulator: bigint;
        isOpen: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuoteAssetAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isQuoteAsset"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removePreset"
  ): TypedContractMethod<[binStep: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeQuoteAsset"
  ): TypedContractMethod<[quoteAsset: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokePendingOwner"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipient"
  ): TypedContractMethod<[feeRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeesParametersOnPair"
  ): TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      binStep: BigNumberish,
      baseFactor: BigNumberish,
      filterPeriod: BigNumberish,
      decayPeriod: BigNumberish,
      reductionFactor: BigNumberish,
      variableFeeControl: BigNumberish,
      protocolShare: BigNumberish,
      maxVolatilityAccumulator: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFlashLoanFee"
  ): TypedContractMethod<[flashLoanFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLBPairIgnored"
  ): TypedContractMethod<
    [
      tokenX: AddressLike,
      tokenY: AddressLike,
      binStep: BigNumberish,
      ignored: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setLBPairImplementation"
  ): TypedContractMethod<
    [lbPairImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPendingOwner"
  ): TypedContractMethod<[pendingOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPreset"
  ): TypedContractMethod<
    [
      binStep: BigNumberish,
      baseFactor: BigNumberish,
      filterPeriod: BigNumberish,
      decayPeriod: BigNumberish,
      reductionFactor: BigNumberish,
      variableFeeControl: BigNumberish,
      protocolShare: BigNumberish,
      maxVolatilityAccumulator: BigNumberish,
      isOpen: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPresetOpenState"
  ): TypedContractMethod<
    [binStep: BigNumberish, isOpen: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FeeRecipientSet"
  ): TypedContractEvent<
    FeeRecipientSetEvent.InputTuple,
    FeeRecipientSetEvent.OutputTuple,
    FeeRecipientSetEvent.OutputObject
  >;
  getEvent(
    key: "FlashLoanFeeSet"
  ): TypedContractEvent<
    FlashLoanFeeSetEvent.InputTuple,
    FlashLoanFeeSetEvent.OutputTuple,
    FlashLoanFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "LBPairCreated"
  ): TypedContractEvent<
    LBPairCreatedEvent.InputTuple,
    LBPairCreatedEvent.OutputTuple,
    LBPairCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LBPairIgnoredStateChanged"
  ): TypedContractEvent<
    LBPairIgnoredStateChangedEvent.InputTuple,
    LBPairIgnoredStateChangedEvent.OutputTuple,
    LBPairIgnoredStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "LBPairImplementationSet"
  ): TypedContractEvent<
    LBPairImplementationSetEvent.InputTuple,
    LBPairImplementationSetEvent.OutputTuple,
    LBPairImplementationSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PendingOwnerSet"
  ): TypedContractEvent<
    PendingOwnerSetEvent.InputTuple,
    PendingOwnerSetEvent.OutputTuple,
    PendingOwnerSetEvent.OutputObject
  >;
  getEvent(
    key: "PresetOpenStateChanged"
  ): TypedContractEvent<
    PresetOpenStateChangedEvent.InputTuple,
    PresetOpenStateChangedEvent.OutputTuple,
    PresetOpenStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "PresetRemoved"
  ): TypedContractEvent<
    PresetRemovedEvent.InputTuple,
    PresetRemovedEvent.OutputTuple,
    PresetRemovedEvent.OutputObject
  >;
  getEvent(
    key: "PresetSet"
  ): TypedContractEvent<
    PresetSetEvent.InputTuple,
    PresetSetEvent.OutputTuple,
    PresetSetEvent.OutputObject
  >;
  getEvent(
    key: "QuoteAssetAdded"
  ): TypedContractEvent<
    QuoteAssetAddedEvent.InputTuple,
    QuoteAssetAddedEvent.OutputTuple,
    QuoteAssetAddedEvent.OutputObject
  >;
  getEvent(
    key: "QuoteAssetRemoved"
  ): TypedContractEvent<
    QuoteAssetRemovedEvent.InputTuple,
    QuoteAssetRemovedEvent.OutputTuple,
    QuoteAssetRemovedEvent.OutputObject
  >;

  filters: {
    "FeeRecipientSet(address,address)": TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;
    FeeRecipientSet: TypedContractEvent<
      FeeRecipientSetEvent.InputTuple,
      FeeRecipientSetEvent.OutputTuple,
      FeeRecipientSetEvent.OutputObject
    >;

    "FlashLoanFeeSet(uint256,uint256)": TypedContractEvent<
      FlashLoanFeeSetEvent.InputTuple,
      FlashLoanFeeSetEvent.OutputTuple,
      FlashLoanFeeSetEvent.OutputObject
    >;
    FlashLoanFeeSet: TypedContractEvent<
      FlashLoanFeeSetEvent.InputTuple,
      FlashLoanFeeSetEvent.OutputTuple,
      FlashLoanFeeSetEvent.OutputObject
    >;

    "LBPairCreated(address,address,uint256,address,uint256)": TypedContractEvent<
      LBPairCreatedEvent.InputTuple,
      LBPairCreatedEvent.OutputTuple,
      LBPairCreatedEvent.OutputObject
    >;
    LBPairCreated: TypedContractEvent<
      LBPairCreatedEvent.InputTuple,
      LBPairCreatedEvent.OutputTuple,
      LBPairCreatedEvent.OutputObject
    >;

    "LBPairIgnoredStateChanged(address,bool)": TypedContractEvent<
      LBPairIgnoredStateChangedEvent.InputTuple,
      LBPairIgnoredStateChangedEvent.OutputTuple,
      LBPairIgnoredStateChangedEvent.OutputObject
    >;
    LBPairIgnoredStateChanged: TypedContractEvent<
      LBPairIgnoredStateChangedEvent.InputTuple,
      LBPairIgnoredStateChangedEvent.OutputTuple,
      LBPairIgnoredStateChangedEvent.OutputObject
    >;

    "LBPairImplementationSet(address,address)": TypedContractEvent<
      LBPairImplementationSetEvent.InputTuple,
      LBPairImplementationSetEvent.OutputTuple,
      LBPairImplementationSetEvent.OutputObject
    >;
    LBPairImplementationSet: TypedContractEvent<
      LBPairImplementationSetEvent.InputTuple,
      LBPairImplementationSetEvent.OutputTuple,
      LBPairImplementationSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PendingOwnerSet(address)": TypedContractEvent<
      PendingOwnerSetEvent.InputTuple,
      PendingOwnerSetEvent.OutputTuple,
      PendingOwnerSetEvent.OutputObject
    >;
    PendingOwnerSet: TypedContractEvent<
      PendingOwnerSetEvent.InputTuple,
      PendingOwnerSetEvent.OutputTuple,
      PendingOwnerSetEvent.OutputObject
    >;

    "PresetOpenStateChanged(uint256,bool)": TypedContractEvent<
      PresetOpenStateChangedEvent.InputTuple,
      PresetOpenStateChangedEvent.OutputTuple,
      PresetOpenStateChangedEvent.OutputObject
    >;
    PresetOpenStateChanged: TypedContractEvent<
      PresetOpenStateChangedEvent.InputTuple,
      PresetOpenStateChangedEvent.OutputTuple,
      PresetOpenStateChangedEvent.OutputObject
    >;

    "PresetRemoved(uint256)": TypedContractEvent<
      PresetRemovedEvent.InputTuple,
      PresetRemovedEvent.OutputTuple,
      PresetRemovedEvent.OutputObject
    >;
    PresetRemoved: TypedContractEvent<
      PresetRemovedEvent.InputTuple,
      PresetRemovedEvent.OutputTuple,
      PresetRemovedEvent.OutputObject
    >;

    "PresetSet(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PresetSetEvent.InputTuple,
      PresetSetEvent.OutputTuple,
      PresetSetEvent.OutputObject
    >;
    PresetSet: TypedContractEvent<
      PresetSetEvent.InputTuple,
      PresetSetEvent.OutputTuple,
      PresetSetEvent.OutputObject
    >;

    "QuoteAssetAdded(address)": TypedContractEvent<
      QuoteAssetAddedEvent.InputTuple,
      QuoteAssetAddedEvent.OutputTuple,
      QuoteAssetAddedEvent.OutputObject
    >;
    QuoteAssetAdded: TypedContractEvent<
      QuoteAssetAddedEvent.InputTuple,
      QuoteAssetAddedEvent.OutputTuple,
      QuoteAssetAddedEvent.OutputObject
    >;

    "QuoteAssetRemoved(address)": TypedContractEvent<
      QuoteAssetRemovedEvent.InputTuple,
      QuoteAssetRemovedEvent.OutputTuple,
      QuoteAssetRemovedEvent.OutputObject
    >;
    QuoteAssetRemoved: TypedContractEvent<
      QuoteAssetRemovedEvent.InputTuple,
      QuoteAssetRemovedEvent.OutputTuple,
      QuoteAssetRemovedEvent.OutputObject
    >;
  };
}
