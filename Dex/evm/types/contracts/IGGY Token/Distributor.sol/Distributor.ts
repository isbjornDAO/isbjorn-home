/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DistributorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimReflection"
      | "deposit"
      | "dividendsPerShare"
      | "dividendsPerShareAccuracyFactor"
      | "getUnpaidEarnings"
      | "minDistribution"
      | "minPeriod"
      | "process"
      | "setDistributionCriteria"
      | "setShare"
      | "shareholderClaims"
      | "shareholderIndexes"
      | "shares"
      | "totalDistributed"
      | "totalDividends"
      | "totalShares"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "DistributionCriteriaUpdate" | "NewFundDeposit"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimReflection",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividendsPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dividendsPerShareAccuracyFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnpaidEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minDistribution",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "minPeriod", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "process",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDistributionCriteria",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setShare",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shareholderClaims",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shareholderIndexes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "shares", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "totalDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDividends",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimReflection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dividendsPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dividendsPerShareAccuracyFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnpaidEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "minPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDistributionCriteria",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shareholderClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shareholderIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDividends",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
}

export namespace DistributionCriteriaUpdateEvent {
  export type InputTuple = [
    minPeriod: BigNumberish,
    minDistribution: BigNumberish
  ];
  export type OutputTuple = [minPeriod: bigint, minDistribution: bigint];
  export interface OutputObject {
    minPeriod: bigint;
    minDistribution: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewFundDepositEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Distributor extends BaseContract {
  connect(runner?: ContractRunner | null): Distributor;
  waitForDeployment(): Promise<this>;

  interface: DistributorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimReflection: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  dividendsPerShare: TypedContractMethod<[], [bigint], "view">;

  dividendsPerShareAccuracyFactor: TypedContractMethod<[], [bigint], "view">;

  getUnpaidEarnings: TypedContractMethod<
    [shareholder: AddressLike],
    [bigint],
    "view"
  >;

  minDistribution: TypedContractMethod<[], [bigint], "view">;

  minPeriod: TypedContractMethod<[], [bigint], "view">;

  process: TypedContractMethod<[gas: BigNumberish], [void], "nonpayable">;

  setDistributionCriteria: TypedContractMethod<
    [_minPeriod: BigNumberish, _minDistribution: BigNumberish],
    [void],
    "nonpayable"
  >;

  setShare: TypedContractMethod<
    [shareholder: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  shareholderClaims: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  shareholderIndexes: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  shares: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        totalExcluded: bigint;
        totalRealised: bigint;
      }
    ],
    "view"
  >;

  totalDistributed: TypedContractMethod<[], [bigint], "view">;

  totalDividends: TypedContractMethod<[], [bigint], "view">;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimReflection"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dividendsPerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dividendsPerShareAccuracyFactor"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnpaidEarnings"
  ): TypedContractMethod<[shareholder: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDistribution"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "process"
  ): TypedContractMethod<[gas: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDistributionCriteria"
  ): TypedContractMethod<
    [_minPeriod: BigNumberish, _minDistribution: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setShare"
  ): TypedContractMethod<
    [shareholder: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shareholderClaims"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "shareholderIndexes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "shares"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        totalExcluded: bigint;
        totalRealised: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDividends"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "DistributionCriteriaUpdate"
  ): TypedContractEvent<
    DistributionCriteriaUpdateEvent.InputTuple,
    DistributionCriteriaUpdateEvent.OutputTuple,
    DistributionCriteriaUpdateEvent.OutputObject
  >;
  getEvent(
    key: "NewFundDeposit"
  ): TypedContractEvent<
    NewFundDepositEvent.InputTuple,
    NewFundDepositEvent.OutputTuple,
    NewFundDepositEvent.OutputObject
  >;

  filters: {
    "DistributionCriteriaUpdate(uint256,uint256)": TypedContractEvent<
      DistributionCriteriaUpdateEvent.InputTuple,
      DistributionCriteriaUpdateEvent.OutputTuple,
      DistributionCriteriaUpdateEvent.OutputObject
    >;
    DistributionCriteriaUpdate: TypedContractEvent<
      DistributionCriteriaUpdateEvent.InputTuple,
      DistributionCriteriaUpdateEvent.OutputTuple,
      DistributionCriteriaUpdateEvent.OutputObject
    >;

    "NewFundDeposit(uint256)": TypedContractEvent<
      NewFundDepositEvent.InputTuple,
      NewFundDepositEvent.OutputTuple,
      NewFundDepositEvent.OutputObject
    >;
    NewFundDeposit: TypedContractEvent<
      NewFundDepositEvent.InputTuple,
      NewFundDepositEvent.OutputTuple,
      NewFundDepositEvent.OutputObject
    >;
  };
}
