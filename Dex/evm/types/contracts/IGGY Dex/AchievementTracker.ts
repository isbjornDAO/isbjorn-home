/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface AchievementTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "WAVAX"
      | "achievements"
      | "getGlobalLiquidityActions"
      | "getGlobalTokenLiquidityStats"
      | "getGlobalTokenSwapStats"
      | "getGlobalTotalSwaps"
      | "getUserLiquidityActions"
      | "getUserTokenLiquidityStats"
      | "getUserTokenSwapStats"
      | "getUserTotalSwaps"
      | "globalLiquidityStats"
      | "globalSwapStats"
      | "isbjornRouter"
      | "owner"
      | "recordAddLiquidity"
      | "recordRemoveLiquidity"
      | "recordSwapIn"
      | "recordSwapOut"
      | "revokeOwnership"
      | "setIsbjornRouter"
      | "transferOwnership"
      | "userLiquidityStats"
      | "userSwapStats"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;

  encodeFunctionData(functionFragment: "WAVAX", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "achievements",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalLiquidityActions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalTokenLiquidityStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalTokenSwapStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalTotalSwaps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLiquidityActions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenLiquidityStats",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTokenSwapStats",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTotalSwaps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalLiquidityStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "globalSwapStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isbjornRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordAddLiquidity",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRemoveLiquidity",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordSwapIn",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordSwapOut",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setIsbjornRouter",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userLiquidityStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userSwapStats",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "WAVAX", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "achievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalLiquidityActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalTokenLiquidityStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalTokenSwapStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalTotalSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLiquidityActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenLiquidityStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTokenSwapStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTotalSwaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalLiquidityStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalSwapStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isbjornRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordAddLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRemoveLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSwapIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordSwapOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIsbjornRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userLiquidityStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userSwapStats",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AchievementTracker extends BaseContract {
  connect(runner?: ContractRunner | null): AchievementTracker;
  waitForDeployment(): Promise<this>;

  interface: AchievementTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  WAVAX: TypedContractMethod<[], [string], "view">;

  achievements: TypedContractMethod<[], [string], "view">;

  getGlobalLiquidityActions: TypedContractMethod<
    [],
    [[bigint, bigint] & { totalAdds: bigint; totalRemovals: bigint }],
    "view"
  >;

  getGlobalTokenLiquidityStats: TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { totalSupplied: bigint; totalRemoved: bigint }],
    "view"
  >;

  getGlobalTokenSwapStats: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        bought: bigint;
        sold: bigint;
        cumulativeVolume: bigint;
      }
    ],
    "view"
  >;

  getGlobalTotalSwaps: TypedContractMethod<[], [bigint], "view">;

  getUserLiquidityActions: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { totalAdds: bigint; totalRemovals: bigint }],
    "view"
  >;

  getUserTokenLiquidityStats: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [[bigint, bigint] & { totalSupplied: bigint; totalRemoved: bigint }],
    "view"
  >;

  getUserTokenSwapStats: TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        bought: bigint;
        sold: bigint;
        cumulativeVolume: bigint;
      }
    ],
    "view"
  >;

  getUserTotalSwaps: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  globalLiquidityStats: TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalLiquidityAdds: bigint;
        totalLiquidityRemovals: bigint;
      }
    ],
    "view"
  >;

  globalSwapStats: TypedContractMethod<[], [bigint], "view">;

  isbjornRouter: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordAddLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  recordRemoveLiquidity: TypedContractMethod<
    [
      account: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  recordSwapIn: TypedContractMethod<
    [account: AddressLike, tokenIn: AddressLike, amountIn: BigNumberish],
    [void],
    "nonpayable"
  >;

  recordSwapOut: TypedContractMethod<
    [account: AddressLike, tokenOut: AddressLike, amountOut: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setIsbjornRouter: TypedContractMethod<
    [_isbjbornRouter: AddressLike, _WAVAX: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  userLiquidityStats: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint] & {
        totalLiquidityAdds: bigint;
        totalLiquidityRemovals: bigint;
      }
    ],
    "view"
  >;

  userSwapStats: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "WAVAX"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "achievements"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGlobalLiquidityActions"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { totalAdds: bigint; totalRemovals: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlobalTokenLiquidityStats"
  ): TypedContractMethod<
    [token: AddressLike],
    [[bigint, bigint] & { totalSupplied: bigint; totalRemoved: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlobalTokenSwapStats"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        bought: bigint;
        sold: bigint;
        cumulativeVolume: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getGlobalTotalSwaps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserLiquidityActions"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { totalAdds: bigint; totalRemovals: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTokenLiquidityStats"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [[bigint, bigint] & { totalSupplied: bigint; totalRemoved: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTokenSwapStats"
  ): TypedContractMethod<
    [user: AddressLike, token: AddressLike],
    [
      [bigint, bigint, bigint] & {
        bought: bigint;
        sold: bigint;
        cumulativeVolume: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTotalSwaps"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "globalLiquidityStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint] & {
        totalLiquidityAdds: bigint;
        totalLiquidityRemovals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "globalSwapStats"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isbjornRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordAddLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordRemoveLiquidity"
  ): TypedContractMethod<
    [
      account: AddressLike,
      token0: AddressLike,
      token1: AddressLike,
      amount0: BigNumberish,
      amount1: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordSwapIn"
  ): TypedContractMethod<
    [account: AddressLike, tokenIn: AddressLike, amountIn: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordSwapOut"
  ): TypedContractMethod<
    [account: AddressLike, tokenOut: AddressLike, amountOut: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsbjornRouter"
  ): TypedContractMethod<
    [_isbjbornRouter: AddressLike, _WAVAX: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userLiquidityStats"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint] & {
        totalLiquidityAdds: bigint;
        totalLiquidityRemovals: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userSwapStats"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
