/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IsbjornStakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EPOCH_TIME"
      | "claimAllRewards"
      | "claimReward"
      | "configureEpoch"
      | "currentEpoch"
      | "deposit"
      | "earned"
      | "epochs"
      | "exit"
      | "getCurrentEpoch"
      | "getEpochPoolRate"
      | "owner"
      | "recoverToken"
      | "removeEpoch"
      | "revokeOwnership"
      | "rewardsPerToken"
      | "stakingConfigs"
      | "totalEpochs"
      | "transferOwnership"
      | "userStakingInfo"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "EpochConfigured"
      | "EpochRemoved"
      | "OwnershipTransferred"
      | "RewardClaimed"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EPOCH_TIME",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimAllRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureEpoch",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike[],
      AddressLike[],
      BigNumberish[][],
      BigNumberish[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPoolRate",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEpoch",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsPerToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingConfigs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userStakingInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "EPOCH_TIME", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimAllRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPoolRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userStakingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochConfiguredEvent {
  export type InputTuple = [
    epochNumber: BigNumberish,
    startTime: BigNumberish,
    stakingTokens: AddressLike[],
    rewardTokens: AddressLike[],
    weights: BigNumberish[][]
  ];
  export type OutputTuple = [
    epochNumber: bigint,
    startTime: bigint,
    stakingTokens: string[],
    rewardTokens: string[],
    weights: bigint[][]
  ];
  export interface OutputObject {
    epochNumber: bigint;
    startTime: bigint;
    stakingTokens: string[];
    rewardTokens: string[];
    weights: bigint[][];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EpochRemovedEvent {
  export type InputTuple = [epochNumber: BigNumberish];
  export type OutputTuple = [epochNumber: bigint];
  export interface OutputObject {
    epochNumber: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardClaimedEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingToken: AddressLike,
    rewardToken: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakingToken: string,
    rewardToken: string,
    reward: bigint
  ];
  export interface OutputObject {
    user: string;
    stakingToken: string;
    rewardToken: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    user: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [user: string, token: string, amount: bigint];
  export interface OutputObject {
    user: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IsbjornStaking extends BaseContract {
  connect(runner?: ContractRunner | null): IsbjornStaking;
  waitForDeployment(): Promise<this>;

  interface: IsbjornStakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EPOCH_TIME: TypedContractMethod<[], [bigint], "view">;

  claimAllRewards: TypedContractMethod<
    [stakingToken: AddressLike],
    [void],
    "nonpayable"
  >;

  claimReward: TypedContractMethod<
    [stakingToken: AddressLike, rewardToken: AddressLike],
    [void],
    "nonpayable"
  >;

  configureEpoch: TypedContractMethod<
    [
      epochNumber: BigNumberish,
      startTime: BigNumberish,
      stakingTokens: AddressLike[],
      rewardTokens: AddressLike[],
      rewardAmounts: BigNumberish[][],
      weights: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  earned: TypedContractMethod<
    [account: AddressLike, stakingToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  epochs: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { startTime: bigint; isActive: boolean }],
    "view"
  >;

  exit: TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  getEpochPoolRate: TypedContractMethod<
    [
      epochNum: BigNumberish,
      stakingToken: AddressLike,
      rewardToken: AddressLike
    ],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  recoverToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  removeEpoch: TypedContractMethod<
    [epochNumber: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardsPerToken: TypedContractMethod<
    [stakingToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  stakingConfigs: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        duration: bigint;
        periodFinish: bigint;
        lastUpdateTime: bigint;
        totalSupply: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  totalEpochs: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  userStakingInfo: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EPOCH_TIME"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimAllRewards"
  ): TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimReward"
  ): TypedContractMethod<
    [stakingToken: AddressLike, rewardToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configureEpoch"
  ): TypedContractMethod<
    [
      epochNumber: BigNumberish,
      startTime: BigNumberish,
      stakingTokens: AddressLike[],
      rewardTokens: AddressLike[],
      rewardAmounts: BigNumberish[][],
      weights: BigNumberish[][]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<
    [account: AddressLike, stakingToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, boolean] & { startTime: bigint; isActive: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochPoolRate"
  ): TypedContractMethod<
    [
      epochNum: BigNumberish,
      stakingToken: AddressLike,
      rewardToken: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeEpoch"
  ): TypedContractMethod<[epochNumber: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardsPerToken"
  ): TypedContractMethod<
    [stakingToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "stakingConfigs"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        duration: bigint;
        periodFinish: bigint;
        lastUpdateTime: bigint;
        totalSupply: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalEpochs"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userStakingInfo"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EpochConfigured"
  ): TypedContractEvent<
    EpochConfiguredEvent.InputTuple,
    EpochConfiguredEvent.OutputTuple,
    EpochConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "EpochRemoved"
  ): TypedContractEvent<
    EpochRemovedEvent.InputTuple,
    EpochRemovedEvent.OutputTuple,
    EpochRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RewardClaimed"
  ): TypedContractEvent<
    RewardClaimedEvent.InputTuple,
    RewardClaimedEvent.OutputTuple,
    RewardClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EpochConfigured(uint256,uint256,address[],address[],uint32[][])": TypedContractEvent<
      EpochConfiguredEvent.InputTuple,
      EpochConfiguredEvent.OutputTuple,
      EpochConfiguredEvent.OutputObject
    >;
    EpochConfigured: TypedContractEvent<
      EpochConfiguredEvent.InputTuple,
      EpochConfiguredEvent.OutputTuple,
      EpochConfiguredEvent.OutputObject
    >;

    "EpochRemoved(uint256)": TypedContractEvent<
      EpochRemovedEvent.InputTuple,
      EpochRemovedEvent.OutputTuple,
      EpochRemovedEvent.OutputObject
    >;
    EpochRemoved: TypedContractEvent<
      EpochRemovedEvent.InputTuple,
      EpochRemovedEvent.OutputTuple,
      EpochRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RewardClaimed(address,address,address,uint256)": TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;
    RewardClaimed: TypedContractEvent<
      RewardClaimedEvent.InputTuple,
      RewardClaimedEvent.OutputTuple,
      RewardClaimedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
