/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IsbjornLPStakingOld {
  export type RewardConfigStruct = {
    rewardToken: AddressLike;
    totalAmount: BigNumberish;
    ratePerSecond: BigNumberish;
  };

  export type RewardConfigStructOutput = [
    rewardToken: string,
    totalAmount: bigint,
    ratePerSecond: bigint
  ] & { rewardToken: string; totalAmount: bigint; ratePerSecond: bigint };
}

export interface IsbjornLPStakingOldInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EPOCH_DURATION"
      | "claimRewards"
      | "configureEpoch"
      | "configurePool"
      | "currentEpoch"
      | "earned"
      | "epochs"
      | "exit"
      | "getCurrentEpoch"
      | "getEpochPoolInfo"
      | "getEpochPoolRewards"
      | "getPoolRewardRate"
      | "getUserPendingRewards"
      | "getUserRewardDebt"
      | "isStakingToken"
      | "owner"
      | "recoverToken"
      | "revokeOwnership"
      | "stake"
      | "transferOwnership"
      | "userInfo"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EpochConfigured"
      | "OwnershipTransferred"
      | "PoolConfigured"
      | "RewardPaid"
      | "Staked"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EPOCH_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureEpoch",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configurePool",
    values: [BigNumberish, AddressLike, AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "earned",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exit", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getCurrentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPoolInfo",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEpochPoolRewards",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolRewardRate",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPendingRewards",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewardDebt",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStakingToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "EPOCH_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configurePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEpochPoolRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewardDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace EpochConfiguredEvent {
  export type InputTuple = [epochNumber: BigNumberish, startTime: BigNumberish];
  export type OutputTuple = [epochNumber: bigint, startTime: bigint];
  export interface OutputObject {
    epochNumber: bigint;
    startTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolConfiguredEvent {
  export type InputTuple = [
    epochNumber: BigNumberish,
    stakingToken: AddressLike,
    rewardTokens: AddressLike[],
    rewardAmounts: BigNumberish[]
  ];
  export type OutputTuple = [
    epochNumber: bigint,
    stakingToken: string,
    rewardTokens: string[],
    rewardAmounts: bigint[]
  ];
  export interface OutputObject {
    epochNumber: bigint;
    stakingToken: string;
    rewardTokens: string[];
    rewardAmounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingToken: AddressLike,
    rewardToken: AddressLike,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakingToken: string,
    rewardToken: string,
    reward: bigint
  ];
  export interface OutputObject {
    user: string;
    stakingToken: string;
    rewardToken: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakingToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    stakingToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    user: AddressLike,
    stakingToken: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakingToken: string,
    amount: bigint
  ];
  export interface OutputObject {
    user: string;
    stakingToken: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IsbjornLPStakingOld extends BaseContract {
  connect(runner?: ContractRunner | null): IsbjornLPStakingOld;
  waitForDeployment(): Promise<this>;

  interface: IsbjornLPStakingOldInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EPOCH_DURATION: TypedContractMethod<[], [bigint], "view">;

  claimRewards: TypedContractMethod<
    [stakingToken: AddressLike],
    [void],
    "nonpayable"
  >;

  configureEpoch: TypedContractMethod<
    [epochNumber: BigNumberish, startTime: BigNumberish],
    [void],
    "nonpayable"
  >;

  configurePool: TypedContractMethod<
    [
      epochNumber: BigNumberish,
      stakingToken: AddressLike,
      rewardTokens: AddressLike[],
      rewardAmounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  earned: TypedContractMethod<
    [account: AddressLike, stakingToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  epochs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  exit: TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;

  getCurrentEpoch: TypedContractMethod<[], [bigint], "view">;

  getEpochPoolInfo: TypedContractMethod<
    [epochNum: BigNumberish, stakingToken: AddressLike],
    [[bigint, boolean] & { totalSupply: bigint; isActive: boolean }],
    "view"
  >;

  getEpochPoolRewards: TypedContractMethod<
    [epochNum: BigNumberish, stakingToken: AddressLike],
    [IsbjornLPStakingOld.RewardConfigStructOutput[]],
    "view"
  >;

  getPoolRewardRate: TypedContractMethod<
    [
      epochNum: BigNumberish,
      stakingToken: AddressLike,
      rewardToken: AddressLike
    ],
    [bigint],
    "view"
  >;

  getUserPendingRewards: TypedContractMethod<
    [stakingToken: AddressLike, user: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  getUserRewardDebt: TypedContractMethod<
    [stakingToken: AddressLike, user: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;

  isStakingToken: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recoverToken: TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  revokeOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stake: TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [_owner: AddressLike],
    [void],
    "nonpayable"
  >;

  userInfo: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  withdraw: TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EPOCH_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureEpoch"
  ): TypedContractMethod<
    [epochNumber: BigNumberish, startTime: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "configurePool"
  ): TypedContractMethod<
    [
      epochNumber: BigNumberish,
      stakingToken: AddressLike,
      rewardTokens: AddressLike[],
      rewardAmounts: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "earned"
  ): TypedContractMethod<
    [account: AddressLike, stakingToken: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "epochs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        startTime: bigint;
        endTime: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "exit"
  ): TypedContractMethod<[stakingToken: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCurrentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEpochPoolInfo"
  ): TypedContractMethod<
    [epochNum: BigNumberish, stakingToken: AddressLike],
    [[bigint, boolean] & { totalSupply: bigint; isActive: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEpochPoolRewards"
  ): TypedContractMethod<
    [epochNum: BigNumberish, stakingToken: AddressLike],
    [IsbjornLPStakingOld.RewardConfigStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPoolRewardRate"
  ): TypedContractMethod<
    [
      epochNum: BigNumberish,
      stakingToken: AddressLike,
      rewardToken: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPendingRewards"
  ): TypedContractMethod<
    [stakingToken: AddressLike, user: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRewardDebt"
  ): TypedContractMethod<
    [stakingToken: AddressLike, user: AddressLike, rewardToken: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStakingToken"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recoverToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[_owner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userInfo"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [stakingToken: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EpochConfigured"
  ): TypedContractEvent<
    EpochConfiguredEvent.InputTuple,
    EpochConfiguredEvent.OutputTuple,
    EpochConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolConfigured"
  ): TypedContractEvent<
    PoolConfiguredEvent.InputTuple,
    PoolConfiguredEvent.OutputTuple,
    PoolConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "EpochConfigured(uint256,uint256)": TypedContractEvent<
      EpochConfiguredEvent.InputTuple,
      EpochConfiguredEvent.OutputTuple,
      EpochConfiguredEvent.OutputObject
    >;
    EpochConfigured: TypedContractEvent<
      EpochConfiguredEvent.InputTuple,
      EpochConfiguredEvent.OutputTuple,
      EpochConfiguredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolConfigured(uint256,address,address[],uint256[])": TypedContractEvent<
      PoolConfiguredEvent.InputTuple,
      PoolConfiguredEvent.OutputTuple,
      PoolConfiguredEvent.OutputObject
    >;
    PoolConfigured: TypedContractEvent<
      PoolConfiguredEvent.InputTuple,
      PoolConfiguredEvent.OutputTuple,
      PoolConfiguredEvent.OutputObject
    >;

    "RewardPaid(address,address,address,uint256)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;

    "Staked(address,address,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Withdrawn(address,address,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
