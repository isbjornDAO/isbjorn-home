/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface PuppetClaimInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adminDeposit"
      | "bonusClaimById"
      | "claim"
      | "claimDetails"
      | "claimableAmount"
      | "claimedAmountById"
      | "maxClaimPerToken"
      | "nftContract"
      | "nftInitialIndex"
      | "nftTotalSupply"
      | "ownedTokens"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setBonusClaims"
      | "totalClaimed"
      | "totalDeposited"
      | "transferOwnership"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminDeposit"
      | "ClaimPayout"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adminDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bonusClaimById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimDetails",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableAmount",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimedAmountById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxClaimPerToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftInitialIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBonusClaims",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adminDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bonusClaimById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimedAmountById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxClaimPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftInitialIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nftTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBonusClaims",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace AdminDepositEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimPayoutEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [owner: string, tokenId: bigint, amount: bigint];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PuppetClaim extends BaseContract {
  connect(runner?: ContractRunner | null): PuppetClaim;
  waitForDeployment(): Promise<this>;

  interface: PuppetClaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adminDeposit: TypedContractMethod<[], [void], "payable">;

  bonusClaimById: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  claim: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  claimDetails: TypedContractMethod<[user: AddressLike], [bigint[][]], "view">;

  claimableAmount: TypedContractMethod<
    [tokenIds: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  claimedAmountById: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  maxClaimPerToken: TypedContractMethod<[], [bigint], "view">;

  nftContract: TypedContractMethod<[], [string], "view">;

  nftInitialIndex: TypedContractMethod<[], [bigint], "view">;

  nftTotalSupply: TypedContractMethod<[], [bigint], "view">;

  ownedTokens: TypedContractMethod<[user: AddressLike], [bigint[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setBonusClaims: TypedContractMethod<
    [tokenIds: BigNumberish[], bonusAmounts: BigNumberish[]],
    [void],
    "payable"
  >;

  totalClaimed: TypedContractMethod<[], [bigint], "view">;

  totalDeposited: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adminDeposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "bonusClaimById"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "claim"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "claimDetails"
  ): TypedContractMethod<[user: AddressLike], [bigint[][]], "view">;
  getFunction(
    nameOrSignature: "claimableAmount"
  ): TypedContractMethod<[tokenIds: BigNumberish[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "claimedAmountById"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxClaimPerToken"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nftInitialIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nftTotalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownedTokens"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setBonusClaims"
  ): TypedContractMethod<
    [tokenIds: BigNumberish[], bonusAmounts: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "totalClaimed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AdminDeposit"
  ): TypedContractEvent<
    AdminDepositEvent.InputTuple,
    AdminDepositEvent.OutputTuple,
    AdminDepositEvent.OutputObject
  >;
  getEvent(
    key: "ClaimPayout"
  ): TypedContractEvent<
    ClaimPayoutEvent.InputTuple,
    ClaimPayoutEvent.OutputTuple,
    ClaimPayoutEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdminDeposit(uint256)": TypedContractEvent<
      AdminDepositEvent.InputTuple,
      AdminDepositEvent.OutputTuple,
      AdminDepositEvent.OutputObject
    >;
    AdminDeposit: TypedContractEvent<
      AdminDepositEvent.InputTuple,
      AdminDepositEvent.OutputTuple,
      AdminDepositEvent.OutputObject
    >;

    "ClaimPayout(address,uint256,uint256)": TypedContractEvent<
      ClaimPayoutEvent.InputTuple,
      ClaimPayoutEvent.OutputTuple,
      ClaimPayoutEvent.OutputObject
    >;
    ClaimPayout: TypedContractEvent<
      ClaimPayoutEvent.InputTuple,
      ClaimPayoutEvent.OutputTuple,
      ClaimPayoutEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
