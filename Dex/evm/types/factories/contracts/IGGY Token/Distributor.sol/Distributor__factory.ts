/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Distributor,
  DistributorInterface,
} from "../../../../contracts/IGGY Token/Distributor.sol/Distributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_rewardToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "minPeriod",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "minDistribution",
        type: "uint256",
      },
    ],
    name: "DistributionCriteriaUpdate",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NewFundDeposit",
    type: "event",
  },
  {
    inputs: [],
    name: "claimReflection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "dividendsPerShare",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dividendsPerShareAccuracyFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareholder",
        type: "address",
      },
    ],
    name: "getUnpaidEarnings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minDistribution",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "process",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_minPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minDistribution",
        type: "uint256",
      },
    ],
    name: "setDistributionCriteria",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareholder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shareholderClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shareholderIndexes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "shares",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalExcluded",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalRealised",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDistributed",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalDividends",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalShares",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052610708600a55670de0b6b3a7640000600b553480156200002357600080fd5b50604051620018b6380380620018b683398181016040528101906200004991906200013b565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200016d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200010382620000d6565b9050919050565b6200011581620000f6565b81146200012157600080fd5b50565b60008151905062000135816200010a565b92915050565b600060208284031215620001545762000153620000d1565b5b6000620001648482850162000124565b91505092915050565b611739806200017d6000396000f3fe6080604052600436106100f75760003560e01c8063997664d71161008a578063e2d2e21911610059578063e2d2e21914610337578063efca2eed14610362578063ffb2c4791461038d578063ffd49c84146103b6576100fe565b8063997664d714610267578063b6b55f2514610292578063ce7c2ac2146102bb578063d4fda1f2146102fa576100fe565b806337563293116100c657806337563293146101bd5780633a98ef39146101d45780634fab0ae8146101ff57806366817df51461022a576100fe565b806311ce023d1461010357806314b6ca961461012e57806328fd3198146101575780632d48e89614610194576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b506101186103e1565b6040516101259190611226565b60405180910390f35b34801561013a57600080fd5b50610155600480360381019061015091906112d0565b6103f4565b005b34801561016357600080fd5b5061017e60048036038101906101799190611310565b6106db565b60405161018b9190611226565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b6919061133d565b6107ed565b005b3480156101c957600080fd5b506101d26108ca565b005b3480156101e057600080fd5b506101e96108e4565b6040516101f69190611226565b60405180910390f35b34801561020b57600080fd5b506102146108ea565b6040516102219190611226565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c9190611310565b6108f0565b60405161025e9190611226565b60405180910390f35b34801561027357600080fd5b5061027c610908565b6040516102899190611226565b60405180910390f35b34801561029e57600080fd5b506102b960048036038101906102b4919061137d565b61090e565b005b3480156102c757600080fd5b506102e260048036038101906102dd9190611310565b610a25565b6040516102f1939291906113aa565b60405180910390f35b34801561030657600080fd5b50610321600480360381019061031c9190611310565b610a4f565b60405161032e9190611226565b60405180910390f35b34801561034357600080fd5b5061034c610a67565b6040516103599190611226565b60405180910390f35b34801561036e57600080fd5b50610377610a6d565b6040516103849190611226565b60405180910390f35b34801561039957600080fd5b506103b460048036038101906103af919061137d565b610a73565b005b3480156103c257600080fd5b506103cb610c2e565b6040516103d89190611226565b60405180910390f35b6ec097ce7bc90715b34b9f100000000081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610482576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104799061143e565b60405180910390fd5b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015411156104d7576104d682610c34565b5b60008111801561052957506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b1561053c5761053782610eb9565b61059e565b60008114801561058e57506000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154115b1561059d5761059c82610f68565b5b5b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001546006546105ef919061148d565b6105f991906114c1565b60068190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550610691600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461116f565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505050565b600080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540361072f57600090506107e8565b600061077c600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461116f565b90506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490508082116107d7576000925050506107e8565b80826107e3919061148d565b925050505b919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461087b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108729061143e565b60405180910390fd5b81600a8190555080600b819055507f7d38de579bb682aa05ace7e32d15f88df69a3a53f6f89fcd0236f93fcc7e6362600a54600b546040516108be9291906114f5565b60405180910390a15050565b6108d3336111a0565b156108e2576108e133610c34565b5b565b60065481565b600b5481565b60046020528060005260406000206000915090505481565b60075481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461099c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109939061143e565b60405180910390fd5b806007546109aa91906114c1565b600781905550600654816ec097ce7bc90715b34b9f10000000006109ce919061151e565b6109d8919061158f565b6009546109e591906114c1565b6009819055507f6a464fbfd2428ef7edab93930e64042148498d37c64c5122c4ab37843d6a3d1181604051610a1a9190611226565b60405180910390a150565b60056020528060005260406000206000915090508060000154908060010154908060020154905083565b60036020528060005260406000206000915090505481565b60095481565b60085481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af89061143e565b60405180910390fd5b6000600280549050905060008103610b195750610c2b565b6000805a905060005b8483108015610b3057508381105b15610c265783600c5410610b47576000600c819055505b610b906002600c5481548110610b6057610b5f6115c0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166111a0565b15610bdf57610bde6002600c5481548110610bae57610bad6115c0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610c34565b5b5a8284610bec91906114c1565b610bf6919061148d565b92505a9150600c6000815480929190610c0e906115ef565b91905055508080610c1e906115ef565b915050610b22565b505050505b50565b600a5481565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001540315610eb6576000610c8a826106db565b90506000811115610eb457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610cf2929190611646565b6020604051808303816000875af1158015610d11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3591906116a7565b5080600854610d4491906114c1565b60088190555042600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154610ddc91906114c1565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550610e6d600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015461116f565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b505b50565b600280549050600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026001600280549050610f7c919061148d565b81548110610f8d57610f8c6115c0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548154811061100b5761100a6115c0565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460036000600260016002805490506110ab919061148d565b815481106110bc576110bb6115c0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002805480611137576111366116d4565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550565b60006ec097ce7bc90715b34b9f10000000006009548361118f919061151e565b611199919061158f565b9050919050565b600042600a54600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546111f091906114c1565b1080156112065750600b54611204836106db565b115b9050919050565b6000819050919050565b6112208161120d565b82525050565b600060208201905061123b6000830184611217565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061127182611246565b9050919050565b61128181611266565b811461128c57600080fd5b50565b60008135905061129e81611278565b92915050565b6112ad8161120d565b81146112b857600080fd5b50565b6000813590506112ca816112a4565b92915050565b600080604083850312156112e7576112e6611241565b5b60006112f58582860161128f565b9250506020611306858286016112bb565b9150509250929050565b60006020828403121561132657611325611241565b5b60006113348482850161128f565b91505092915050565b6000806040838503121561135457611353611241565b5b6000611362858286016112bb565b9250506020611373858286016112bb565b9150509250929050565b60006020828403121561139357611392611241565b5b60006113a1848285016112bb565b91505092915050565b60006060820190506113bf6000830186611217565b6113cc6020830185611217565b6113d96040830184611217565b949350505050565b600082825260208201905092915050565b7f21546f6b656e0000000000000000000000000000000000000000000000000000600082015250565b60006114286006836113e1565b9150611433826113f2565b602082019050919050565b600060208201905081810360008301526114578161141b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114988261120d565b91506114a38361120d565b92508282039050818111156114bb576114ba61145e565b5b92915050565b60006114cc8261120d565b91506114d78361120d565b92508282019050808211156114ef576114ee61145e565b5b92915050565b600060408201905061150a6000830185611217565b6115176020830184611217565b9392505050565b60006115298261120d565b91506115348361120d565b92508282026115428161120d565b915082820484148315176115595761155861145e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061159a8261120d565b91506115a58361120d565b9250826115b5576115b4611560565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006115fa8261120d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361162c5761162b61145e565b5b600182019050919050565b61164081611266565b82525050565b600060408201905061165b6000830185611637565b6116686020830184611217565b9392505050565b60008115159050919050565b6116848161166f565b811461168f57600080fd5b50565b6000815190506116a18161167b565b92915050565b6000602082840312156116bd576116bc611241565b5b60006116cb84828501611692565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122048b2ac55b3833ad86ed7f56da1935452c386ce06a6e6b91cfd94f66de5a55ff364736f6c63430008180033";

type DistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Distributor__factory extends ContractFactory {
  constructor(...args: DistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _rewardToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_rewardToken, overrides || {});
  }
  override deploy(
    _rewardToken: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_rewardToken, overrides || {}) as Promise<
      Distributor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Distributor__factory {
    return super.connect(runner) as Distributor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DistributorInterface {
    return new Interface(_abi) as DistributorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Distributor {
    return new Contract(address, _abi, runner) as unknown as Distributor;
  }
}
