/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IDistributor,
  IDistributorInterface,
} from "../../../../contracts/IGGY Token/Distributor.sol/IDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "gas",
        type: "uint256",
      },
    ],
    name: "process",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minPeriod",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "minDistribution",
        type: "uint256",
      },
    ],
    name: "setDistributionCriteria",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "shareholder",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "setShare",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IDistributor__factory {
  static readonly abi = _abi;
  static createInterface(): IDistributorInterface {
    return new Interface(_abi) as IDistributorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IDistributor {
    return new Contract(address, _abi, runner) as unknown as IDistributor;
  }
}
